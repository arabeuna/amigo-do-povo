// Script simplificado para gerar token JWT sem depend√™ncias externas
// Baseado no JWT_SECRET usado em produ√ß√£o: 'your-secret-key'

// Fun√ß√£o para gerar HMAC-SHA256 (simplificada)
function hmacSha256(message, key) {
  // Esta √© uma implementa√ß√£o simplificada
  // Em produ√ß√£o, use a biblioteca crypto
  const encoder = new TextEncoder();
  const keyData = encoder.encode(key);
  const messageData = encoder.encode(message);
  
  // Simula√ß√£o b√°sica - em produ√ß√£o use crypto.subtle.importKey
  return btoa(message + key);
}

// Fun√ß√£o para gerar token JWT
function generateJWT(payload, secret) {
  const header = {
    alg: 'HS256',
    typ: 'JWT'
  };
  
  const now = Math.floor(Date.now() / 1000);
  const exp = now + (24 * 60 * 60); // 24 horas
  
  const finalPayload = {
    ...payload,
    iat: now,
    exp: exp
  };
  
  const encodedHeader = btoa(JSON.stringify(header));
  const encodedPayload = btoa(JSON.stringify(finalPayload));
  
  const signature = hmacSha256(encodedHeader + '.' + encodedPayload, secret);
  
  return encodedHeader + '.' + encodedPayload + '.' + signature;
}

// JWT_SECRET usado em produ√ß√£o
const JWT_SECRET = 'your-secret-key';

// Dados do usu√°rio admin
const userData = {
  userId: 1,
  email: 'admin@amigodopovo.com',
  perfil: 'admin'
};

// Gerar token
const token = generateJWT(userData, JWT_SECRET);

console.log('üîë Novo token de produ√ß√£o gerado:');
console.log(token);
console.log('\nüìã Payload:');
console.log(JSON.stringify(userData, null, 2));
console.log('\n‚è∞ Expira em: 24 horas');
console.log('\nüìã JWT_SECRET usado:', JWT_SECRET);

console.log('\nüìã Informa√ß√µes:');
console.log('- JWT_SECRET usado:', JWT_SECRET);
console.log('- Expira√ß√£o: 24h');
console.log('- Usu√°rio: admin@amigodopovo.com');
console.log('- Perfil: admin');
console.log('\n‚úÖ Token pronto para uso em produ√ß√£o!'); 